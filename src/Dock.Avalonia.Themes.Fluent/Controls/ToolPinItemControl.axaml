<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:core="using:Dock.Model.Core"
                    xmlns:converters="using:Dock.Avalonia.Converters"
                    x:DataType="core:IDockable"
                    x:CompileBindings="True">
  <Design.PreviewWith>
    <ToolPinItemControl Width="30" Height="400" />
  </Design.PreviewWith>


  <ContextMenu x:Key="ToolPinItemControlContextMenu">
    <MenuItem Header="{DynamicResource ToolPinItemControlFloatString}"
              Command="{Binding Owner.Factory.FloatDockable}"
              CommandParameter="{Binding}">
      <MenuItem.IsVisible>
        <MultiBinding Converter="{x:Static BoolConverters.And}">
          <Binding Path="CanFloat"  />
          <MultiBinding Converter="{x:Static converters:CanRemoveDockableConverter.Instance}">
            <Binding Path="((core:IDock)Owner).CanCloseLastDockable" FallbackValue="{x:True}" />
            <Binding Path="((core:IDock)Owner).VisibleDockables.Count" FallbackValue="0" />
          </MultiBinding>
        </MultiBinding>
      </MenuItem.IsVisible>
    </MenuItem>
    <MenuItem Header="{DynamicResource ToolPinItemControlShowString}"
              Command="{Binding Owner.Factory.PreviewPinnedDockable}"
              CommandParameter="{Binding}"
              IsVisible="{Binding CanPin}"/>
    <MenuItem Header="{DynamicResource ToolPinItemControlDockAsDocumentString}"
              Command="{Binding Owner.Factory.DockAsDocument}"
              CommandParameter="{Binding}"
              IsVisible="{Binding Owner, Converter={x:Static converters:OwnerIsToolDockConverter.Instance}}"/>
    <MenuItem Header="{DynamicResource ToolPinItemControlCloseString}"
              Command="{Binding Owner.Factory.CloseDockable}"
              CommandParameter="{Binding}">
      <MenuItem.IsVisible>
        <MultiBinding Converter="{x:Static BoolConverters.And}">
          <Binding Path="CanClose"  />
          <MultiBinding Converter="{x:Static converters:CanRemoveDockableConverter.Instance}">
            <Binding Path="((core:IDock)Owner).CanCloseLastDockable" FallbackValue="{x:True}" />
            <Binding Path="((core:IDock)Owner).VisibleDockables.Count" FallbackValue="0" />
          </MultiBinding>
        </MultiBinding>
      </MenuItem.IsVisible>
    </MenuItem>
  </ContextMenu>

  <ControlTheme x:Key="{x:Type ToolPinItemControl}" TargetType="ToolPinItemControl">

    <Setter Property="(AutomationProperties.AutomationId)" Value="{Binding Id}" />
    <Setter Property="(AutomationProperties.Name)" Value="{Binding Title}" />

    <Setter Property="(DockProperties.IsDragEnabled)" Value="{Binding CanDrag}" />
    <Setter Property="(DockProperties.IsDropEnabled)" Value="{Binding CanDrop}" />

    <Setter Property="Background" Value="Transparent" />

    <Setter Property="Template">
      <ControlTemplate>
        <DockableControl TrackingMode="Pinned">
          <LayoutTransformControl x:Name="PART_LayoutTransformControl">
            <Border Background="{TemplateBinding Background}"
                    DockProperties.IsDragArea="True"
                    DockProperties.IsDropArea="True"
                    DockProperties.IsDockTarget="True"
                    DockProperties.ShowDockIndicatorOnly="True"
                    DockProperties.IndicatorDockOperation="Fill">
              <Button Background="Transparent"
                      BorderBrush="Transparent"
                      BorderThickness="0"
                      CornerRadius="0"
                      Command="{Binding Owner.Factory.PreviewPinnedDockable}"
                      CommandParameter="{Binding}"
                      IsVisible="{Binding CanPin}">
                <TextBlock Text="{Binding Title}"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Left"
                           ContextMenu="{DynamicResource ToolPinItemControlContextMenu}">
                </TextBlock>
              </Button>
            </Border>
          </LayoutTransformControl>
        </DockableControl>
      </ControlTemplate>
    </Setter>

    <Style Selector="^[Orientation=Vertical]/template/ LayoutTransformControl#PART_LayoutTransformControl">
      <Setter Property="LayoutTransform">
        <RotateTransform Angle="270" />
      </Setter>
    </Style>

    <Style Selector="^[Orientation=Horizontal]/template/ LayoutTransformControl#PART_LayoutTransformControl">
      <Setter Property="LayoutTransform">
        <RotateTransform Angle="0" />
      </Setter>
    </Style>

  </ControlTheme>

</ResourceDictionary>
